---
title: "Percepciones de Sustentabilidad (LCA)"
author: "R. Cantillan"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    theme:
          - cosmo
          - custom.scss
    css: custom.scss    
    code-fold: true
    fig-width: 10
    fig-height: 6
execute:
  warning: false
  message: false
image: "featured.jpg"
title-block-banner: featured.jpg
title-block-banner-color: "rgba(0, 0, 0, 0.8)"
title-block-style: default
abstract: | 

  Este estudio aplica análisis de clases latentes para identificar tipologías en percepciones de sustentabilidad. Examina la relación entre el Modo de Vida Imperial y la Reflexividad Ambiental Antropocéntrica, identificando tres clases distintas de respuestas. Incluye factores sociodemográficos como covariables y analiza el "auto-engaño societal" entre reconocimiento de crisis y defensa de modelos actuales.

---
```{r}
#| label: setup
#| include: false

library(here)
library(tidyverse)
library(haven)
library(psych)
library(poLCA)
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(gridExtra)
```

# Introducción

Este documento presenta los resultados del análisis de clases latentes aplicado a percepciones y prácticas de sustentabilidad. El objetivo es identificar patrones o tipologías en las respuestas de los participantes respecto a:

- Escala de Modo de Vida Imperial (MVI)

Basado en las siguientes preguntas: Respecto a las siguientes frases y en una escala de 1 a 4, en donde 1 es muy en desacuerdo y 4 es muy de acuerdo ¿Qué tan de acuerdo está usted con las siguientes afirmaciones?  

P7_2: "Los problemas sociales, como la equidad, salud, etc., son más importantes que los problemas ambientales"   
P7_4: "Se puede crecer económicamente sin dañar el medioambiente"  
P7_5: "Los problemas ambientales son preocupaciones de los países desarrollados que tienen su situación socio-económica resuelta"  
P4_2: "No es necesario cambiar nuestras costumbres, los problemas ambientales pueden resolverse con tecnología"  
P4_4: "El progreso para Chile significa que la mayoría de nosotros podamos vivir como en los países desarrollados"  
  

- Escala de Reflexividad Ambiental Antropocéntrica (RAA)

P7_1: "Los problemas ambientales pueden resolverse cambiando nuestras costumbres"  
P7_3: "Los modos de vida de las clases sociales más altas son más responsable de la crisis ambiental"  
P4_1: Variables recodificada como "urgenciacrisis" (invertida): "La crisis ambiental es un problema que hay que enfrentar con urgencia"  
P4_3: Variable recodificada como "actividadeshumanas" (invertida): "Las actividades humanas son la principal causa de los cambios climáticos"  


- En "Tipologías del Auto-Engaño" indican que existe una contradicción entre el reconocimiento de la crisis ambiental (reflexividad) y la defensa del modelo de vida actual (modo de vida imperial). El documento plantea la necesidad de analizar conjuntamente estas dimensiones para identificar patrones de "auto-engaño societal"


# Metodología 

```{r}
#| label: cargar-datos
# Cargar datos procesados previamente
load(here("objects", "vars_modelo.RData"))

# Mostrar estructura de los datos
glimpse(vars_modelo)
```


## Dicotomización de variables

Para facilitar el análisis de clases latentes, se dicotomizaron las variables originales (que estaban en escala Likert de 1-4) en dos categorías:

- Categoría 1: Desacuerdo (valores originales 1-2)
- Categoría 2: Acuerdo (valores originales 3-4)

```{r}
#| label: mostrar-dicotomizacion

# Calcular las frecuencias de cada categoría para cada variable
frecuencias <- data.frame(
  Variable = names(vars_modelo),
  Descripcion = c(
    "Problemas sociales > ambientales",
    "Crecimiento sin daño ambiental", 
    "Problemas ambientales de países desarrollados", 
    "No cambiar costumbres, tecnología resolverá", 
    "Progreso es vivir como países desarrollados", 
    "Resolver problemas cambiando costumbres", 
    "Clases altas más responsables de crisis",
    "Urgencia de la crisis ambiental", 
    "Actividades humanas causan cambios climáticos"
  )
)

# Agregar conteos y porcentajes
frecuencias$N_Desacuerdo <- sapply(vars_modelo, function(x) sum(x == 1, na.rm = TRUE))
frecuencias$N_Acuerdo <- sapply(vars_modelo, function(x) sum(x == 2, na.rm = TRUE))
frecuencias$Total <- frecuencias$N_Desacuerdo + frecuencias$N_Acuerdo
frecuencias$Pct_Desacuerdo <- round(frecuencias$N_Desacuerdo / frecuencias$Total * 100, 1)
frecuencias$Pct_Acuerdo <- round(frecuencias$N_Acuerdo / frecuencias$Total * 100, 1)

# Mostrar solo la tabla
kable(frecuencias[, c("Variable", "Descripcion", "N_Desacuerdo", "Pct_Desacuerdo", "N_Acuerdo", "Pct_Acuerdo")],
      col.names = c("Variable", "Descripción", "N Desacuerdo", "% Desacuerdo", "N Acuerdo", "% Acuerdo")) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
  add_header_above(c(" " = 2, "Desacuerdo (Cat. 1)" = 2, "Acuerdo (Cat. 2)" = 2))
```



#Seleccion N de clases 
```{r}
#| label: ajustar-modelos
#| cache: true
#| echo: false
#| results: hide

set.seed(1234)

# Definir la fórmula para los modelos
f <- cbind(P7_2, P7_4, P7_5, P4_2, P4_4, 
          P7_1, P7_3, urgenciacrisis, 
          actividadeshumanas) ~ NULL

# Ajustar modelos con diferentes números de clases
lca2 <- poLCA(f, vars_modelo, nclass = 2, maxiter = 1000, nrep = 10, graphs = FALSE)
lca3 <- poLCA(f, vars_modelo, nclass = 3, maxiter = 1000, nrep = 10, graphs = FALSE)
lca4 <- poLCA(f, vars_modelo, nclass = 4, maxiter = 1000, nrep = 10, graphs = FALSE)
lca5 <- poLCA(f, vars_modelo, nclass = 5, maxiter = 1000, nrep = 10, graphs = FALSE)
lca6 <- poLCA(f, vars_modelo, nclass = 6, maxiter = 1000, nrep = 10, graphs = FALSE)

# Lista de modelos y número de clases
modelos <- list(lca2, lca3, lca4, lca5, lca6)
n_clases <- 2:6

# Crear tabla de comparación
resultados <- data.frame(
  Clases = n_clases,
  BIC = sapply(modelos, function(x) x$bic),
  AIC = sapply(modelos, function(x) x$aic),
  Log_likelihood = sapply(modelos, function(x) x$llik),
  Entropia = sapply(modelos, poLCA.entropy)
)
```


# Comparar modelos 

```{r}
#| label: comparar-modelos
#| fig-cap: "Criterios de información por número de clases"

# Mostrar tabla de resultados
kable(resultados, digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)

# Gráfico de criterios de información
ggplot(resultados) +
  geom_line(aes(x = Clases, y = BIC, colour = "BIC"), size = 1) +
  geom_point(aes(x = Clases, y = BIC, colour = "BIC"), size = 3) +
  geom_line(aes(x = Clases, y = AIC, colour = "AIC"), size = 1) +
  geom_point(aes(x = Clases, y = AIC, colour = "AIC"), size = 3) +
  theme_minimal() +
  labs(title = "Criterios de información por número de clases",
       y = "Valor", 
       colour = "Criterio") +
  theme(legend.position = "top")
```


# Análisis del modelo de 3 clases

## Tamaño de las clases
```{r}
#| label: tamano-clases
#| fig-cap: "Distribución de casos en cada clase latente"

modelo_3 <- lca3

# Examinar tamaños de clase 
tamano_clases <- data.frame(
  Clase = paste("Clase", 1:length(modelo_3$P)),
  Proporcion = modelo_3$P,
  Porcentaje = round(modelo_3$P * 100, 1)
)

# Mostrar tabla de tamaños
kable(tamano_clases, digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)

# Gráfico de barras para tamaños de clase
ggplot(tamano_clases, aes(x = Clase, y = Porcentaje, fill = Clase)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = paste0(Porcentaje, "%")), 
            position = position_stack(vjust = 0.5), 
            color = "black", size = 4) +
  theme_minimal() +
  labs(title = "Distribución de casos por clase latente",
       y = "Porcentaje (%)", 
       x = "") +
  theme(legend.position = "none")
```



# Probabilidades condicionales por pregunta 

```{r}
#| label: probabilidades-condicionales
#| fig-cap: "Probabilidades condicionales por pregunta"

# Extraer probabilidades condicionales
probs_clase <- modelo_3$probs

# Definir los nombres de variables para la visualización
vars_nombres <- c(
  "Problemas sociales > ambientales (MVI)", 
  "Crecimiento sin daño ambiental (MVI)", 
  "Problemas ambientales de países desarrollados (MVI)", 
  "No cambiar costumbres, tecnología resolverá (MVI)", 
  "Progreso es vivir como países desarrollados (MVI)", 
  "Resolver problemas cambiando costumbres (RAA)", 
  "Clases altas más responsables de crisis (RAA)",
  "Urgencia de la crisis ambiental (RAA)", 
  "Actividades humanas causan cambios climáticos (RAA)"
)

# Analizar las probabilidades para cada clase y crear una visualización
resultados_largo <- data.frame()

for (i in 1:length(probs_clase)) {
  var_nombre <- vars_nombres[i]
  temp_df <- data.frame(
    Variable = var_nombre,
    Clase = rep(paste("Clase", 1:3), each = 2),
    Respuesta = rep(c("Desacuerdo", "Acuerdo"), 3),
    Probabilidad = c(
      probs_clase[[i]][1, 1], probs_clase[[i]][1, 2],
      probs_clase[[i]][2, 1], probs_clase[[i]][2, 2],
      probs_clase[[i]][3, 1], probs_clase[[i]][3, 2]
    )
  )
  resultados_largo <- rbind(resultados_largo, temp_df)
}

# Gráfico de barras apiladas
ggplot(resultados_largo, aes(x = Clase, y = Probabilidad, fill = Respuesta)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ Variable, scales = "free_y", ncol = 3) +
  scale_fill_manual(values = c("Desacuerdo" = "black", "Acuerdo" = "lightblue")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        strip.text = element_text(size = 8)) +
  labs(title = "Probabilidades condicionales por clase latente",
       subtitle = "Probabilidad de responder Acuerdo vs Desacuerdo para cada variable",
       y = "Probabilidad")
```


# Probabilidades condicionales por clase 

```{r}
#| label: vis-alternativa
#| fig-cap: "Probabilidades condicionales por clase latente (visualización alternativa)"

# Definir los nombres originales de variables
var_originales <- c("P7_2", "P7_4", "P7_5", "P4_2", "P4_4", 
                    "P7_1", "P7_3", "urgenciacrisis", "actividadeshumanas")

# Preparar los datos para el gráfico
LMmodelo <- data.frame()

# Para cada variable y cada clase
for (i in 1:length(probs_clase)) {
  var_nombre <- var_originales[i]
  
  for (j in 1:3) { # Para las 3 clases
    temp_df <- data.frame(
      item = var_nombre,
      state = j,
      category = c(0, 1),  # 0 = Desacuerdo, 1 = Acuerdo
      value = c(probs_clase[[i]][j, 1], probs_clase[[i]][j, 2])
    )
    LMmodelo <- rbind(LMmodelo, temp_df)
  }
}

# Obtener porcentajes de las clases
porcentajes <- round(modelo_3$P * 100, 0)

# Formatear los datos 
LMmodelo <- LMmodelo %>%
  dplyr::mutate(clase = factor(paste0("Clase ", state, " (", porcentajes[state], "%)"),
                               levels = paste0("Clase ", 1:3, " (", porcentajes[1:3], "%)"))) %>%
  dplyr::mutate(category = factor(ifelse(category == 0, "Desacuerdo", "Acuerdo"),
                                  levels = c("Desacuerdo", "Acuerdo")))

# Mapeo para etiquetas más descriptivas
etiquetas <- c(
  "P7_2" = "P7_2: Problemas sociales > ambientales", 
  "P7_4" = "P7_4: Crecimiento sin daño ambiental", 
  "P7_5" = "P7_5: Problemas ambientales de países desarrollados", 
  "P4_2" = "P4_2: No cambiar costumbres, tecnología resolverá", 
  "P4_4" = "P4_4: Progreso como países desarrollados", 
  "P7_1" = "P7_1: Resolver problemas cambiando costumbres", 
  "P7_3" = "P7_3: Clases altas más responsables de crisis",
  "urgenciacrisis" = "Urgencia de la crisis ambiental", 
  "actividadeshumanas" = "Actividades humanas causan cambios"
)

# Gráfico horizontal con barras apiladas
ggplot(LMmodelo, aes(y = factor(item, levels = var_originales, labels = etiquetas[var_originales]), 
                     x = value, fill = category)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_grid(. ~ clase) +  # Clases en columnas
  scale_fill_manual(values = c("Desacuerdo" = "#A8D8E8", "Acuerdo" = "#000000")) +
  labs(title = "Probabilidades condicionales por clase latente",
       x = "Probabilidad", y = "", fill = "Respuesta") + 
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 10),
    strip.text = element_text(size = 11),
    legend.position = "top",
    panel.grid.major = element_blank()
  )
```

# Calidad de la clasificación 

```{r}
#| label: calidad-clasificacion

# Asignar clases a cada caso
clases_asignadas <- modelo_3$predclass

# Evaluar la calidad de clasificación
calidad_clasificacion <- mean(apply(modelo_3$posterior, 1, max))

# Mostrar resultado
cat("La probabilidad media de clasificación correcta es:", round(calidad_clasificacion, 3), "\n")
```

# Análisis con covariables
```{r}
#| label: cargar-covariables
#| echo: true

# Cargar covariables
load(here("objects", "covar.RData"))

# Crear dataframe con clase latente y covariables
datos_analisis <- data.frame(
  clase_latente = factor(modelo_3$predclass),
  sexo = covar$sexo,
  edad = covar$edad,
  educacion = covar$educacion,
  region = covar$region
)

# Mostrar estructura de los datos
str(datos_analisis)

```

# Tablas de contingencia

```{r}
#| label: tablas-contingencia
#| fig-width: 10
#| fig-height: 6

# Función mejorada para analizar y visualizar asociaciones
analizar_covariable <- function(variable) {
  # Crear tabla de contingencia
  tabla <- table(datos_analisis$clase_latente, datos_analisis[[variable]])
  # Calcular porcentajes por columna
  prop_tabla <- prop.table(tabla, 2) * 100
  # Realizar test chi-cuadrado
  test <- chisq.test(tabla)
  
  # Preparar datos para visualización
  df_plot <- as.data.frame(prop_tabla)
  names(df_plot) <- c("Clase", "Nivel", "Porcentaje")
  
  # Añadir información sobre frecuencias absolutas
  for (i in 1:nrow(df_plot)) {
    row <- df_plot$Clase[i]
    col <- df_plot$Nivel[i]
    df_plot$Frecuencia[i] <- tabla[row, col]
    df_plot$Etiqueta[i] <- paste0(round(df_plot$Porcentaje[i], 1), "% (n=", df_plot$Frecuencia[i], ")")
  }
  
  # Crear gráfico
  p <- ggplot(df_plot, aes(x = Nivel, y = Porcentaje, fill = Clase)) +
    geom_bar(stat = "identity", position = "dodge") +
    geom_text(aes(label = Etiqueta), 
              position = position_dodge(width = 0.9), 
              vjust = -0.5, size = 3) +
    labs(title = paste("Distribución de clases latentes por", variable),
         subtitle = paste("Chi-cuadrado =", round(test$statistic, 2), 
                         ", p-valor =", format.pval(test$p.value, digits = 3)),
         x = "", y = "Porcentaje (%)") +
    theme_minimal() +
    theme(legend.position = "top",
          axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Añadir indicación visual de significancia estadística
  if (test$p.value < 0.05) {
    p <- p + labs(caption = "* Asociación estadísticamente significativa (p < 0.05)")
  }
  
  return(p)
}

# Generar visualizaciones para cada covariable
plots <- list()
for (var in c("sexo", "edad", "educacion", "region")) {
  plots[[var]] <- analizar_covariable(var)
}

# Mostrar gráficos
plots[["sexo"]]
plots[["edad"]]
plots[["educacion"]]
plots[["region"]]

# Tabla resumen de todas las asociaciones
resultados_chi <- data.frame(
  Covariable = character(),
  Chi_cuadrado = numeric(),
  GL = numeric(),
  Valor_p = numeric(),
  Significativo = character()
)

for (var in c("sexo", "edad", "educacion", "region")) {
  tabla <- table(datos_analisis$clase_latente, datos_analisis[[var]])
  test <- chisq.test(tabla)
  
  resultados_chi <- rbind(resultados_chi, data.frame(
    Covariable = var,
    Chi_cuadrado = round(test$statistic, 2),
    GL = test$parameter,
    Valor_p = round(test$p.value, 4),
    Significativo = ifelse(test$p.value < 0.05, "Sí", "No")
  ))
}

# Mostrar tabla resumen
kable(resultados_chi, 
      col.names = c("Covariable", "Chi-cuadrado", "Grados de libertad", "Valor p", "Significativo"),
      caption = "Resumen de pruebas chi-cuadrado de asociación entre clase latente y covariables") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
```




# Modelo multinomial con covariables

```{r}
#| label: modelo-covariables
#| cache: true
#| echo: false
#| results: hide

# Crear fórmula con covariables
f_multi <- cbind(P7_2, P7_4, P7_5, P4_2, P4_4, 
                 P7_1, P7_3, urgenciacrisis, 
                 actividadeshumanas) ~ sexo + edad + educacion + region

# Combinar los dataframes
datos_completos <- cbind(vars_modelo, covar)

# Ajustar modelos con covariables para diferentes números de clases
lca_cov2 <- poLCA(f_multi, datos_completos, nclass = 2, maxiter = 3000, nrep = 10)
lca_cov3 <- poLCA(f_multi, datos_completos, nclass = 3, maxiter = 3000, nrep = 10)
lca_cov4 <- poLCA(f_multi, datos_completos, nclass = 4, maxiter = 3000, nrep = 10)
lca_cov5 <- poLCA(f_multi, datos_completos, nclass = 5, maxiter = 3000, nrep = 10)
lca_cov6 <- poLCA(f_multi, datos_completos, nclass = 6, maxiter = 3000, nrep = 10)

# Crear una lista con los modelos
modelos_cov <- list(lca_cov2, lca_cov3, lca_cov4, lca_cov5, lca_cov6)
n_clases <- 2:6

# Crear tabla de comparación
resultados_cov <- data.frame(
  Clases = n_clases,
  BIC = sapply(modelos_cov, function(x) x$bic),
  AIC = sapply(modelos_cov, function(x) x$aic),
  Log_likelihood = sapply(modelos_cov, function(x) x$llik),
  Entropia = sapply(modelos_cov, poLCA.entropy)
)
```

# Comparación de modelos con covariables
```{r}
#| label: comparar-modelos-cov
#| fig-cap: "Comparación de criterios de información para modelos con covariables"

# Mostrar tabla de resultados
kable(resultados_cov, digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)

# Gráfico de criterios de información
ggplot(resultados_cov, aes(x = Clases)) +
  geom_line(aes(y = BIC, colour = "BIC"), size = 1) +
  geom_point(aes(y = BIC, colour = "BIC"), size = 3) +
  geom_line(aes(y = AIC, colour = "AIC"), size = 1) +
  geom_point(aes(y = AIC, colour = "AIC"), size = 3) +
  theme_minimal() +
  labs(title = "Criterios de información por número de clases (Con covariables)",
       y = "Valor", 
       colour = "Criterio") +
  theme(legend.position = "top")
```


# Comparación de modelos con y sin covariables

```{r}
#| label: comparar-modelos-con-sin-cov
#| fig-cap: "Comparación de BIC entre modelos con y sin covariables"

# Combinar resultados
resultados_combinados <- rbind(
  transform(resultados, Tipo = "Sin covariables"),
  transform(resultados_cov, Tipo = "Con covariables")
)

# Visualizar comparación
ggplot(resultados_combinados, aes(x = Clases, y = BIC, color = Tipo, group = Tipo)) +
  geom_line(size = 1) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "Comparación de BIC entre modelos con y sin covariables",
       y = "BIC") +
  theme(legend.position = "top")
```

# Modelo de 3 clases con covariables
```{r}
#| label: modelo-3-cov
#| fig-cap: "Probabilidades condicionales del modelo con covariables"

# Seleccionar el modelo de 3 clases con covariables
modelo_cov3 <- lca_cov3

# Examinar tamaños de clase
tamano_clases_cov <- data.frame(
  Clase = paste("Clase", 1:length(modelo_cov3$P)),
  Proporcion = modelo_cov3$P,
  Porcentaje = round(modelo_cov3$P * 100, 1)
)

# Mostrar tabla de tamaños
kable(tamano_clases_cov, digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)

# Extraer probabilidades condicionales
probs_clase_cov <- modelo_cov3$probs

# Crear dataframe para visualización
resultados_largo_cov <- data.frame()

for (i in 1:length(probs_clase_cov)) {
  var_nombre <- vars_nombres[i]
  temp_df <- data.frame(
    Variable = var_nombre,
    Clase = rep(paste("Clase", 1:3), each = 2),
    Respuesta = rep(c("Desacuerdo", "Acuerdo"), 3),
    Probabilidad = c(
      probs_clase_cov[[i]][1, 1], probs_clase_cov[[i]][1, 2],
      probs_clase_cov[[i]][2, 1], probs_clase_cov[[i]][2, 2],
      probs_clase_cov[[i]][3, 1], probs_clase_cov[[i]][3, 2]
    )
  )
  resultados_largo_cov <- rbind(resultados_largo_cov, temp_df)
}

# Visualización horizontal
# Preparar los datos para el gráfico
LMmodelo_cov <- data.frame()

# Para cada variable y cada clase
for (i in 1:length(probs_clase_cov)) {
  var_nombre <- var_originales[i]
  
  for (j in 1:3) { # Para las 3 clases
    temp_df <- data.frame(
      item = var_nombre,
      state = j,
      category = c(0, 1),  # 0 = Desacuerdo, 1 = Acuerdo
      value = c(probs_clase_cov[[i]][j, 1], probs_clase_cov[[i]][j, 2])
    )
    LMmodelo_cov <- rbind(LMmodelo_cov, temp_df)
  }
}

# Obtener porcentajes de las clases
porcentajes_cov <- round(modelo_cov3$P * 100, 0)

# Formatear los datos 
LMmodelo_cov <- LMmodelo_cov %>%
  dplyr::mutate(clase = factor(paste0("Clase ", state, " (", porcentajes_cov[state], "%)"),
                               levels = paste0("Clase ", 1:3, " (", porcentajes_cov[1:3], "%)"))) %>%
  dplyr::mutate(category = factor(ifelse(category == 0, "Desacuerdo", "Acuerdo"),
                                  levels = c("Desacuerdo", "Acuerdo")))

# Gráfico horizontal con barras apiladas
ggplot(LMmodelo_cov, aes(y = factor(item, levels = var_originales, labels = etiquetas[var_originales]), 
                         x = value, fill = category)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_grid(. ~ clase) +  # Clases en columnas
  scale_fill_manual(values = c("Desacuerdo" = "#A8D8E8", "Acuerdo" = "#000000")) +
  labs(title = "Probabilidades condicionales por clase latente (con covariables)",
       x = "Probabilidad", y = "", fill = "Respuesta") + 
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 10),
    strip.text = element_text(size = 11),
    legend.position = "top",
    panel.grid.major = element_blank()
  )
```


# Efecto de las covariables en el modelo

```{r}
#| label: efecto-covariables
#| fig-cap: "Efecto de las covariables en la pertenencia a clases"

# Análisis de los coeficientes del modelo
coeficientes <- modelo_cov3$coeff
errores <- modelo_cov3$coeff.se
odds_ratios <- exp(coeficientes)

# Crear tabla de resultados
tabla_coeficientes <- data.frame(
  Variable = rownames(coeficientes),
  Clase2_Coef = coeficientes[, 1],
  Clase2_SE = errores[, 1],
  Clase2_OR = odds_ratios[, 1],
  Clase3_Coef = coeficientes[, 2],
  Clase3_SE = errores[, 2],
  Clase3_OR = odds_ratios[, 2]
)

# Mostrar tabla de coeficientes
kable(tabla_coeficientes, 
      col.names = c("Variable", "Coef. Clase 2", "SE Clase 2", "OR Clase 2", 
                     "Coef. Clase 3", "SE Clase 3", "OR Clase 3"),
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)

# Preparar datos para visualización de odds ratios
or_data <- data.frame(
  Variable = rep(rownames(coeficientes), 2),
  Clase = factor(rep(c("Clase 2", "Clase 3"), each = nrow(coeficientes))),
  OR = c(odds_ratios[, 1], odds_ratios[, 2]),
  lower_ci = c(exp(coeficientes[, 1] - 1.96 * errores[, 1]), 
               exp(coeficientes[, 2] - 1.96 * errores[, 2])),
  upper_ci = c(exp(coeficientes[, 1] + 1.96 * errores[, 1]), 
               exp(coeficientes[, 2] + 1.96 * errores[, 2]))
)

# Filtrar solo las variables con efectos significativos
# Para simplificar, consideramos significativos aquellos donde el intervalo no cruza 1
or_data$significativo <- (or_data$lower_ci > 1) | (or_data$upper_ci < 1)

# Visualizar odds ratios
ggplot(or_data, aes(x = Variable, y = OR, color = Clase, shape = significativo)) +
  geom_point(size = 3, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), 
                width = 0.2, position = position_dodge(width = 0.5)) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "gray50") +
  coord_flip() +
  scale_y_log10() +
  scale_shape_manual(values = c(1, 16)) +
  theme_minimal() +
  labs(title = "Odds Ratios de covariables por clase",
       subtitle = "En comparación con la Clase 1 (referencia)",
       y = "Odds Ratio (escala logarítmica)", 
       x = "") +
  theme(legend.position = "bottom")
```



